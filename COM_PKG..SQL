create or replace PACKAGE COM_PKG IS


FUNCTION OBTN_COMDOC_NO_FMT4
 (P_SEGORG_ID IN NUMBER
 ,P_COMPRV_ID IN NUMBER
 ,P_COMPRT_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 ,P_COMPDT_TIPO IN VARCHAR2
 ,P_COMPDT_TIPO_DURACION IN VARCHAR2
 ,P_COMPDE_ESTADO IN VARCHAR2
 ,P_FECHA IN DATE := SYSDATE
 )
 RETURN VARCHAR2;
FUNCTION OBTN_COMDOC_NO_FMT2
 (P_SEGORG_ID IN NUMBER
 ,P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 ,P_COMPDT_TIPO IN VARCHAR2
 ,P_COMPDT_TIPO_DURACION IN VARCHAR2
 ,P_COMPDE_ESTADO IN VARCHAR2
 ,P_FECHA IN DATE := SYSDATE
 )
 RETURN VARCHAR2;
FUNCTION OBTN_COMDOC_NO_FMT3
 (P_SEGORG_ID IN NUMBER
 ,P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 ,P_COMPDT_TIPO IN VARCHAR2
 ,P_COMPDT_TIPO_DURACION IN VARCHAR2
 ,P_COMPDE_ESTADO IN VARCHAR2
 ,P_FECHA_VENCIMIENTO IN DATE
 ,P_FECHA IN DATE := SYSDATE
 )
 RETURN VARCHAR2;
FUNCTION OBTN_COMDOC_ESTADO2
 (P_SEGORG_ID IN NUMBER
 ,P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 ,P_COMPDT_TIPO_DURACION IN VARCHAR2
 ,P_COMPDE_ESTADO IN VARCHAR2
 )
 RETURN VARCHAR2;
FUNCTION OBTN_COMPDO_PDTPRV2
 (P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 ,P_COMPDE_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el valor de la variable v_comprv */
PROCEDURE COMDMT_GET
 (P_COMDMT OUT COM_DOMICILIOS_TIPOS%ROWTYPE
 );
/* Seteo la variable v_comprv */
PROCEDURE COMDMT_SET_CODIGO
 (P_CODIGO IN COM_DOMICILIOS_TIPOS.CODIGO%TYPE
 );
/* Seteo la variable v_comprv */
PROCEDURE SET_COMPRV_CUIT
 (P_SEGORG_ID IN COM_PROVEEDORES.SEGORG_ID%TYPE
 ,P_CUIT IN COM_PROVEEDORES.CUIT%TYPE
 );
/* Obtener el documento pdf en binario. */
FUNCTION OBTN_COMCON_LLAMADO_DOC_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 )
 RETURN NUMBER;
PROCEDURE COMCON_LLAMADO_TRANSMITIR
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
/* Generación de Adjudicacion */
PROCEDURE COMADJ_GENERACION
 (P_COMCON_ID IN COM_CONTRATACIONES.ID%TYPE
 ,P_COMADJ_ID OUT COM_ADJUDICACIONES.ID%TYPE
 );
/* Valida la generacion de las adjudicaciones */
PROCEDURE COMADJ_GENERACION_VLD
 (P_COMCON_ID IN NUMBER
 );
/* . Suma las adjudicaciones según el estado indicado */
FUNCTION OBTN_COMADJ_SUMA
 (P_COMCON_ID IN NUMBER
 ,P_SITUACION IN VARCHAR2
 )
 RETURN INTEGER;
/* Crear Responsable de Contratantes */
PROCEDURE COMCCR_CREAR
 (P_SEGORG_CODIGO IN SEG_ORGANIZACIONES.CODIGO%TYPE
 ,P_COMECC_ID IN COM_CONTRATANTES_CAT.ID%TYPE
 ,P_SEGUSU_ID OUT NUMBER
 ,P_SEGUSU_USUARIO IN SEG_USUARIOS.USUARIO%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_SEGUSU_CONTRASENIA IN SEG_USUARIOS.CONTRASENIA%TYPE
 ,P_SEGPRS_TIPO_DOCUMENTO IN COM_RESPONSABLES.TIPO_DOCUMENTO%TYPE
 ,P_SEGPRS_NUMERO_DOCUMENTO IN COM_RESPONSABLES.NUMERO_DOCUMENTO%TYPE
 ,P_SEGPRS_NOMBRE IN COM_RESPONSABLES.NOMBRE%TYPE
 ,P_SEGPRS_EMAIL IN COM_RESPONSABLES.EMAIL%TYPE
 ,P_SEGPRS_OBSERVACIONES IN COM_RESPONSABLES.OBSERVACION%TYPE
 ,P_SEGPFL_CODIGO IN SEG_PERFILES.CODIGO%TYPE
 ,P_SEGAPL_CODIGO IN SEG_APLICACIONES.CODIGO%TYPE
 ,P_COMRST_ID IN COM_RESPONSABLES_TIPOS.ID%TYPE
 ,P_COMRES_ID IN NUMBER := NULL
 );
/* Reactivar Responsable. */
PROCEDURE COMCCR_REACTIVAR
 (P_RESULTADO OUT VARCHAR2
 ,P_COMCCR_ID IN COM_CONTRATANTES_CATRES.ID%TYPE
 );
/* Suspender Responsable. */
PROCEDURE COMCCR_SUSPENDER
 (P_RESULTADO OUT VARCHAR2
 ,P_COMCCR_ID IN COM_CONTRATANTES_CATRES.ID%TYPE
 );
/* Inicializar la Calificación */
PROCEDURE COMCLF_INIC
 (P_COMOCM_ID IN COM_ORDENES_COMPRAS.ID%TYPE
 ,P_COMCLF_ID OUT COM_CALIFICACIONES.ID%TYPE
 );
/* Generar Orden de Provision */
PROCEDURE COMCLF_ANULAR
 (P_COMCLF_ID IN COM_CALIFICACIONES.ID%TYPE
 );
/* Crear Responsable de Contratantes */
PROCEDURE COMCNR_CREAR
 (P_SEGORG_CODIGO IN SEG_ORGANIZACIONES.CODIGO%TYPE
 ,P_COMECO_ID IN COM_CONTRATACIONES.ID%TYPE
 ,P_SEGUSU_ID OUT NUMBER
 ,P_SEGUSU_USUARIO IN SEG_USUARIOS.USUARIO%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_SEGUSU_CONTRASENIA IN SEG_USUARIOS.CONTRASENIA%TYPE
 ,P_SEGPRS_TIPO_DOCUMENTO IN COM_RESPONSABLES.TIPO_DOCUMENTO%TYPE
 ,P_SEGPRS_NUMERO_DOCUMENTO IN COM_RESPONSABLES.NUMERO_DOCUMENTO%TYPE
 ,P_SEGPRS_NOMBRE IN COM_RESPONSABLES.NOMBRE%TYPE
 ,P_SEGPRS_EMAIL IN COM_RESPONSABLES.EMAIL%TYPE
 ,P_SEGPRS_OBSERVACIONES IN COM_RESPONSABLES.OBSERVACION%TYPE
 ,P_SEGPFL_CODIGO IN SEG_PERFILES.CODIGO%TYPE
 ,P_SEGAPL_CODIGO IN SEG_APLICACIONES.CODIGO%TYPE
 ,P_COMRST_ID IN COM_RESPONSABLES_TIPOS.ID%TYPE
 ,P_COMRES_ID IN NUMBER := NULL
 );
/* Reactivar Responsable. */
PROCEDURE COMCNR_REACTIVAR
 (P_RESULTADO OUT VARCHAR2
 ,P_COMCNR_ID IN COM_CONTRATANTES_RES.ID%TYPE
 );
/* Suspender Responsable. */
PROCEDURE COMCNR_SUSPENDER
 (P_RESULTADO OUT VARCHAR2
 ,P_COMCNR_ID IN COM_CONTRATANTES_RES.ID%TYPE
 );
PROCEDURE COMCDG_GET
 (P_COMCDG OUT COM_CONTRATACIONES_DOCGEN%ROWTYPE
 );
PROCEDURE COMCDG_INI;
/* Insertar registro en COM_CONTRATACIONES_DOCGEN. */
PROCEDURE COMCDG_INS
 (P_COMCDG IN COM_CONTRATACIONES_DOCGEN%ROWTYPE
 );
/* Seteo la variable v_comcdg */
PROCEDURE COMCDG_SET
 (P_ID IN NUMBER
 );
PROCEDURE COMCMO_CREAR
 (P_COMCLF_ID IN NUMBER
 ,P_COMCMO_ID OUT NUMBER
 );
FUNCTION COMCMO_CREAR_SN
 (P_COMCLF_ID IN NUMBER
 ,P_COMCTM_ID IN NUMBER
 )
 RETURN VARCHAR2;
PROCEDURE COMCMO_CREAR_VLD
 (P_COMCLF_ID IN NUMBER
 ,P_COMCTM_ID IN NUMBER
 );
/* Excluir un Motivo de las Ordenes Aprobadas */
PROCEDURE COMCMO_EXCLUIR
 (P_COMCTM_ID IN NUMBER
 );
FUNCTION COMCMO_EXCLUIR_SN
 (P_COMCTM_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Validar si se puede Excluir un Motivo de las Ordenes Aprobadas */
PROCEDURE COMCMO_EXCLUIR_VLD
 (P_COMCTM_ID IN NUMBER
 );
FUNCTION COMCMO_INCLUIR_SN
 (P_COMCTM_ID IN NUMBER
 )
 RETURN VARCHAR2;
FUNCTION COMCMO_INIC_SN
 (P_COMCLF_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Incluir un Motivo a las Ordenes Aprobadas */
PROCEDURE COMCMO_INCLUIR
 (P_COMCTM_ID IN NUMBER
 );
/* Validar si se puede Incluir un Motivo a las Ordenes Aprobadas */
PROCEDURE COMCMO_INCLUIR_VLD
 (P_COMCTM_ID IN NUMBER
 );
PROCEDURE COMCMO_INIC
 (P_COMCLF_ID IN NUMBER
 );
PROCEDURE COMCMO_INIC_VLD
 (P_COMCLF_ID IN NUMBER
 );
PROCEDURE COMCON_ACORDAR
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 );
PROCEDURE COMCON_ACORDAR_REVERTIR
 (P_SEGORG_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 ,P_COMCON_ID IN NUMBER
 );
PROCEDURE COMCON_ACORDAR_TRANSMITIR
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
/* Actualiza los Precios Testigos de una Contratación */
PROCEDURE COMCON_ACTUALIZA_CTP
 (P_COMCON_ID IN COM_CONTRATACIONES.ID%TYPE
 );
PROCEDURE COMCON_ANULADA_TRANSMITIR
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
/* Anular Contratacion */
PROCEDURE COMCON_ANULAR
 (P_COMCON_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 ,P_ANULAR_COMPED_SN IN VARCHAR2 := 'NO'
 );
/* Confirmar Proceso Creado */
PROCEDURE COMCON_CONFIRMAR
 (P_COMCON_ID IN NUMBER
 ,P_COMCON_CODIGO OUT NUMBER
 );
PROCEDURE COMCON_ESPECIAL
 (P_COMCON_ID IN NUMBER
 ,P_COMPRV_ID IN NUMBER
 );
/* Evaluar Proceso de Compra */
PROCEDURE COMCON_EVAL
 (P_COMCON_ID IN NUMBER
 );
/* Evaluar Proceso de Compra */
PROCEDURE COMCON_EVALANU
 (P_COMCON_ID IN NUMBER
 );
/* Finalizar las contrataciones que cumplen las condiciones de cierre. */
PROCEDURE COMCON_FIN_AUTOMA
 (P_CANT_DIAS IN NUMERIC
 ,P_MOTIVO IN VARCHAR2
 );
/* Finalizar la contratación */
PROCEDURE COMCON_FINALIZAR
 (P_COMCON_ID IN NUMBER
 ,P_COMPED_ESTADO IN COM_PEDIDOS_EST.ESTADO%TYPE
 );
/* Forzar contratación desierta */
PROCEDURE COMCON_FRZDES
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 ,P_FECHA IN DATE := SYSDATE
 ,P_INTENV_ID OUT NUMBER
 );
/* Transmitir Documento a Tramix */
PROCEDURE COMCON_FRZDES_TRANSMITIR
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
/* Invocar Web Service Actuaciones Tramix - Solicitud de Gasto - Adjuntos */
FUNCTION COMCON_INVOCAR_WS_ADJUNTO
 (P_ACTUACION_ID IN VARCHAR2
 ,P_COMCOD_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Invocar Web Service Actuaciones Tramix - Proceso de Contratación */
FUNCTION COMCON_INVOCAR_WS
 (P_COMCDG_ID IN NUMBER
 ,P_ACTUACION_IDENTIF IN VARCHAR2
 ,P_VALIDA IN NUMBER
 )
 RETURN VARCHAR2;
PROCEDURE COMCON_NOADJUDICADO
 (P_COMCON_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 );
PROCEDURE COMCON_NOADJUDICAD_2
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
PROCEDURE COMCON_PROC_XML_ADJ
 (P_XML IN VARCHAR2
 ,P_ACTUACION_ID IN VARCHAR2
 ,P_SEGORG_ID IN NUMBER
 ,P_RESULTADO OUT VARCHAR2
 ,P_MOTIVO OUT VARCHAR2
 ,P_REFERENCIA OUT VARCHAR2
 );
PROCEDURE COMCON_PROC_XML_ACT
 (P_XML IN VARCHAR2
 ,P_SEGORG_ID IN NUMBER
 ,P_RESULTADO OUT VARCHAR2
 ,P_MOTIVO OUT VARCHAR2
 ,P_REFERENCIA OUT VARCHAR2
 );
/* Revertir el estado Anulado de un proceso */
PROCEDURE COMCON_REVANU
 (P_COMCON_ID IN NUMBER
 ,P_MENSAJE OUT VARCHAR2
 ,P_MOTIVO IN VARCHAR2
 );
/* Revertir Finalización de la contratación */
PROCEDURE COMCON_REVFIN
 (P_COMCON_ID IN NUMBER
 ,P_MOTIVO IN COM_PEDIDOS_EST.MOTIVO%TYPE
 ,P_COMPED_ESTADO IN COM_PEDIDOS_EST.ESTADO%TYPE
 );
/* Revertir el estado No Adjudicado de un proceso */
PROCEDURE COMCON_REVNAD
 (P_COMCON_ID IN NUMBER
 ,P_MENSAJE OUT VARCHAR2
 ,P_MOTIVO IN VARCHAR2
 );
FUNCTION COMCON_TRAMIX_HAB_SN
 (P_SEGORG_ID IN NUMBER
 )
 RETURN VARCHAR2;
PROCEDURE COMCON_VERIFICAR_TRANSMITIR
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
PROCEDURE COMCON_VERIFICAR
 (P_SEGORG_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 ,P_COMCON_ID IN NUMBER
 );
PROCEDURE COMCTM_CREAR
 (P_SEGORG_ID IN NUMBER
 ,P_CODIGO IN VARCHAR2
 ,P_NOMBRE IN VARCHAR2
 ,P_DESCRIPCION IN VARCHAR2
 ,P_SITUACION IN VARCHAR2
 ,P_CALIFICACION IN NUMBER
 ,P_COMCTM_ID OUT NUMBER
 );
FUNCTION COMCTM_CREAR_SN
 (P_SEGORG_ID IN NUMBER
 ,P_CODIGO IN VARCHAR2
 ,P_NOMBRE IN VARCHAR2
 ,P_DESCRIPCION IN VARCHAR2
 ,P_SITUACION IN VARCHAR2
 ,P_CALIFICACION IN NUMBER
 )
 RETURN VARCHAR2;
PROCEDURE COMCTM_CREAR_VLD
 (P_SEGORG_ID IN NUMBER
 ,P_CODIGO IN VARCHAR2
 ,P_NOMBRE IN VARCHAR2
 ,P_DESCRIPCION IN VARCHAR2
 ,P_SITUACION IN VARCHAR2
 ,P_CALIFICACION IN VARCHAR2
 );
PROCEDURE COMCTM_HABILITAR
 (P_COMCTM_ID IN NUMBER
 );
FUNCTION COMCTM_HABILITAR_SN
 (P_COMCTM_ID IN NUMBER
 )
 RETURN INTEGER;
PROCEDURE COMCTM_HABILITAR_VLD
 (P_COMCTM_ID IN NUMBER
 );
PROCEDURE COMCTM_SUSPENDER
 (P_COMCTM_ID IN NUMBER
 );
FUNCTION COMCTM_SUSPENDER_SN
 (P_COMCTM_ID IN NUMBER
 )
 RETURN VARCHAR2;
PROCEDURE COMCTM_SUSPENDER_VLD
 (P_COMCTM_ID IN NUMBER
 );
/* Anula la Cotizacion y su Detalle */
PROCEDURE COMCTZ_ANULAR
 (P_COMCTZ_ID IN COM_COTIZACIONES.ID%TYPE
 );
/* Crear cabezera y detalle de una cotizacion */
PROCEDURE COMCTZ_CREAR
 (P_COMCON_ID IN COM_CONTRATACIONES.ID%TYPE
 ,P_COMPRV_ID IN COM_PROVEEDORES.ID%TYPE
 ,P_COMCTZ_ID OUT COM_COTIZACIONES.ID%TYPE
 );
/* Confirma la Cotizacion y su Detalle */
PROCEDURE COMCTZ_CONFIRMAR
 (P_COMCTZ_ID IN COM_COTIZACIONES.ID%TYPE
 );
/* Invocar Web Service Actuaciones Tramix -Cotizacion - Adjuntos */
FUNCTION COMCTZ_INVOCAR_WS_ADJUNTO
 (P_ACTUACION_ID IN VARCHAR2
 ,P_COMCZC_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Invocar Web Service Actuaciones Tramix - Solicitud de Gasto */
FUNCTION COMCTZ_INVOCAR_WS
 (P_COMCZG_ID IN NUMBER
 ,P_ACTUACION_IDENTIF IN VARCHAR2
 ,P_VALIDA IN NUMBER
 )
 RETURN VARCHAR2;
PROCEDURE COMCTZ_PROC_XML_ADJ
 (P_XML IN VARCHAR2
 ,P_ACTUACION_ID IN VARCHAR2
 ,P_SEGORG_ID IN NUMBER
 ,P_RESULTADO OUT VARCHAR2
 ,P_MOTIVO OUT VARCHAR2
 ,P_REFERENCIA OUT VARCHAR2
 );
PROCEDURE COMCTZ_PROC_XML_ACT
 (P_XML IN VARCHAR2
 ,P_SEGORG_ID IN NUMBER
 ,P_RESULTADO OUT VARCHAR2
 ,P_MOTIVO OUT VARCHAR2
 ,P_REFERENCIA OUT VARCHAR2
 );
PROCEDURE COMCTZ_TRANSMITIR
 (P_SEGORG_ID IN NUMBER
 ,P_COMCTZ_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 ,P_INTENV_ID OUT NUMBER
 );
PROCEDURE COMCTZ_VERIFICAR
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
/* Seteo la variable v_comczg */
PROCEDURE COMCZG_SET
 (P_ID IN NUMBER
 );
PROCEDURE COMCZG_INS
 (P_COMCZG IN COM_COTIZACIONES_DOCGEN%ROWTYPE
 );
PROCEDURE COMCZG_INI;
PROCEDURE COMCZG_GET
 (P_COMCZG OUT COM_COTIZACIONES_DOCGEN%ROWTYPE
 );
/* Invocar Web Service Actuaciones Tramix - Solicitud de Gasto - Adjuntos */
FUNCTION COMCZD_INVOCAR_WS_ADJUNTO
 (P_ACTUACION_ID IN VARCHAR2
 ,P_COMCZC_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Invocar Web Service Actuaciones Tramix - Evaluacion */
FUNCTION COMCZD_INVOCAR_WS
 (P_COMCZG_ID IN NUMBER
 ,P_ACTUACION_IDENTIF IN VARCHAR2
 ,P_VALIDA IN NUMBER
 )
 RETURN VARCHAR2;
/* Anular un registro de Estado de Contratantes. */
PROCEDURE COMECE_ANULAR
 (P_COMECE_ID IN COM_CONTRATANTES_EST.ID%TYPE
 ,P_MOTIVO_SITUACION IN VARCHAR2
 );
PROCEDURE COMOCM_ANULADA_TRAN
 (P_SEGORG_ID IN NUMBER
 ,P_COMOCM_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
PROCEDURE COMOCM_APROBADA_TRAN
 (P_SEGORG_ID IN NUMBER
 ,P_COMOCM_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
/* Aprobar Ordenes de Compras masivamnete */
PROCEDURE COMOCM_APR_AUTOMA
 (P_FECHA_DESDE IN DATE
 ,P_FECHA_HASTA IN DATE
 ,P_FINALIZA_PROC_SN IN VARCHAR2
 ,P_MOTIVO IN VARCHAR2
 );
/* Generar Orden de Provision */
PROCEDURE COMOCM_CALIFICAR
 (P_COMCLF_ID IN COM_CALIFICACIONES.ID%TYPE
 ,P_COMOCM_ID IN COM_ORDENES_COMPRAS.ID%TYPE
 ,P_FECHA IN COM_ORDENES_COMPRAS.FECHA_GENERACION%TYPE
 ,P_CALIFICACION IN COM_CALIFICACIONES.CALIFICACION%TYPE
 ,P_COMENTARIO IN COM_CALIFICACIONES.COMENTARIO%TYPE
 ,P_COMOCE_ESTADO IN COM_ORDENES_COMPRAS_EST.ESTADO%TYPE
 );
PROCEDURE COMOCM_CONTRATO_TRAN
 (P_SEGORG_ID IN NUMBER
 ,P_COMOCM_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
/* Generar Orden de Provision */
PROCEDURE COMOCM_GENERAR
 (P_COMADJ_ID IN COM_ADJUDICACIONES.ID%TYPE
 ,P_FECHA_GENERACION IN COM_ORDENES_COMPRAS.FECHA_GENERACION%TYPE
 ,P_COMCOE_ESTADO IN COM_CONTRATACIONES_EST.ESTADO%TYPE
 ,P_APROBAR IN VARCHAR2 := 'NO'
 ,P_COMADJ_PROCESO OUT VARCHAR2
 );
/* Indica si Puede generar una orden de compra */
FUNCTION COMOCM_GENERAR_SN
 (P_COMADJ_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Validar la Generacion de la Orden de Compra */
PROCEDURE COMOCM_GENERAR_VLD
 (P_COMADJ_ID IN NUMBER
 );
/* Invocar Web Service Actuaciones Tramix - Ordenes de Compra */
FUNCTION COMOCM_INVOCAR_WS
 (P_COMODG_ID IN NUMBER
 ,P_ACTUACION_IDENTIF IN VARCHAR2
 ,P_VALIDA IN NUMBER
 )
 RETURN VARCHAR2;
PROCEDURE COMOCM_NO_CONCR_TRAN
 (P_SEGORG_ID IN NUMBER
 ,P_COMOCM_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
PROCEDURE COMOCM_PROC_XML_ACT
 (P_XML IN VARCHAR2
 ,P_SEGORG_ID IN NUMBER
 ,P_RESULTADO OUT VARCHAR2
 ,P_MOTIVO OUT VARCHAR2
 ,P_REFERENCIA OUT VARCHAR2
 );
/* Generar Orden de Provision */
PROCEDURE COMOCM_RECALIFICAR
 (P_COMCLF_ID IN COM_CALIFICACIONES.ID%TYPE
 ,P_CALIFICACION IN COM_CALIFICACIONES.CALIFICACION%TYPE
 ,P_COMENTARIO IN COM_CALIFICACIONES.COMENTARIO%TYPE
 ,P_COMOCE_ESTADO IN COM_ORDENES_COMPRAS_EST.ESTADO%TYPE
 );
PROCEDURE COMOCM_TRAN_X_LOTE
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 ,P_COMPED_EXPEDIENTE IN VARCHAR
 );
/* Insertar registro en COM_ORDENES_COMPRAS_DOCGEN. */
PROCEDURE COMODG_INS
 (P_COMODG IN COM_ORDENES_COMPRAS_DOCGEN%ROWTYPE
 );
PROCEDURE COMPDE_CREAR
 (P_COMPDT_ID IN NUMBER
 ,P_ESTADO IN VARCHAR2
 ,P_MOTIVO IN VARCHAR2
 );
PROCEDURE COMPDE_CREAR_VLD
 (P_COMPDT_ID IN NUMBER
 ,P_ESTADO IN VARCHAR2
 ,P_MOTIVO IN VARCHAR2
 );
/* Obtener el valor de la variable v_compdt */
PROCEDURE COMPDE_GET
 (P_COMPDE OUT COM_PROVEEDORES_DTE%ROWTYPE
 );
/* Inicializar la variable v_compdo */
PROCEDURE COMPDE_INI;
/* Insertar registro en COM_PROVEEDORES_DTE */
PROCEDURE COMPDE_INS
 (P_COMPDE IN COM_PROVEEDORES_DTE%ROWTYPE
 );
/* Setear la variable v_compdo */
PROCEDURE COMPDE_SET
 (P_ID IN NUMBER
 );
PROCEDURE COMPDG_GET
 (P_COMPDG OUT COM_PEDIDOS_DOCGEN%ROWTYPE
 );
PROCEDURE COMPDG_INI;
/* Insertar registro en COM_PEDIDOS_DOCGEN. */
PROCEDURE COMPDG_INS
 (P_COMPDG IN COM_PEDIDOS_DOCGEN%ROWTYPE
 );
/* Seteo la variable v_comped */
PROCEDURE COMPDG_SET
 (P_ID IN NUMBER
 );
/* Setear la variable v_compdo */
PROCEDURE COMPDO_SET
 (P_ID IN NUMBER
 );
/* Insertar registro en COM_PROVEEDORES_DOC */
PROCEDURE COMPDO_INS
 (P_COMPDO IN COM_PROVEEDORES_DOC%ROWTYPE
 );
/* Inicializar la variable v_compdo */
PROCEDURE COMPDO_INI;
/* Obtener el valor de la variable v_compdo */
PROCEDURE COMPDO_GET
 (P_COMPDO OUT COM_PROVEEDORES_DOC%ROWTYPE
 );
FUNCTION COMPDO_PRESENTADO_FMT
 (P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 ,P_FECHA IN DATE := 'sysdate'
 )
 RETURN VARCHAR2;
/* .Presentacion Documento por Proveedor y Tipo de Contratacion dado */
FUNCTION COMPDO_PRESENTADO_SN
 (P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 ,P_FECHA IN DATE := 'SYSDATE'
 )
 RETURN VARCHAR2;
/* Setear la variable v_compdt */
PROCEDURE COMPDT_SET
 (P_ID IN NUMBER
 );
/* Insertar registro en COM_PROVEEDORES_DOT */
PROCEDURE COMPDT_INS
 (P_COMPDT IN COM_PROVEEDORES_DOT%ROWTYPE
 );
/* Inicializar la variable v_compdt */
PROCEDURE COMPDT_INI;
PROCEDURE COMPDT_SUSPENDER_VLD
 (P_COMPDT_ID IN NUMBER
 );
PROCEDURE COMPDT_SUSPENDER
 (P_COMPDT_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 );
PROCEDURE COMPDT_HABILITAR_VLD
 (P_COMPDT_ID IN NUMBER
 );
PROCEDURE COMPDT_HABILITAR
 (P_COMPDT_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 );
PROCEDURE COMPDT_SET_CODIGO
 (P_SEGORG_ID IN NUMBER
 ,P_CODIGO IN VARCHAR2
 );
/* Obtener el valor de la variable v_compdt */
PROCEDURE COMPDT_GET
 (P_COMPDT OUT COM_PROVEEDORES_DOT%ROWTYPE
 );
PROCEDURE COMPED_ANULAR
 (P_SEGORG_ID IN NUMBER
 ,P_COMPED_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 ,P_INTENV_ID OUT NUMBER
 );
PROCEDURE COMPED_APROBAR
 (P_SEGORG_ID IN NUMBER
 ,P_COMPED_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 ,P_INTENV_ID OUT NUMBER
 );
/* Autorizar un Pedido de Compra */
PROCEDURE COMPED_AUTORIZAR
 (P_COMPED_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 );
PROCEDURE COMPED_AUTORIZAR_VLD
 (P_COMPED_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 );
/* Confirmar Pedido Creado */
PROCEDURE COMPED_CONFIRMAR
 (P_COMPED_ID IN NUMBER
 ,P_COMPED_CODIGO OUT NUMBER
 );
/* Copia todos los datos de un Pedido y genera uno nuevo. */
PROCEDURE COMPED_COPIAR
 (P_COMPED_ID IN NUMBER
 ,P_COMPED_NUE_ID OUT NUMBER
 );
/* Invocar Web Service Actuaciones Tramix - Solicitud de Gasto */
FUNCTION COMPED_INVOCAR_WS
 (P_COMPDG_ID IN NUMBER
 ,P_ACTUACION_IDENTIF IN VARCHAR2
 ,P_VALIDA IN NUMBER
 )
 RETURN VARCHAR2;
/* Invocar Web Service Actuaciones Tramix - Solicitud de Gasto - Adjuntos */
FUNCTION COMPED_INVOCAR_WS_ADJUNTO
 (P_ACTUACION_ID IN VARCHAR2
 ,P_COMPEC_ID IN NUMBER
 )
 RETURN VARCHAR2;
PROCEDURE COMPED_PROC_XML_ADJ
 (P_XML IN VARCHAR2
 ,P_ACTUACION_ID IN VARCHAR2
 ,P_SEGORG_ID IN NUMBER
 ,P_RESULTADO OUT VARCHAR2
 ,P_MOTIVO OUT VARCHAR2
 ,P_REFERENCIA OUT VARCHAR2
 );
PROCEDURE COMPED_PROC_XML_ACT
 (P_XML IN VARCHAR2
 ,P_SEGORG_ID IN NUMBER
 ,P_RESULTADO OUT VARCHAR2
 ,P_MOTIVO OUT VARCHAR2
 ,P_REFERENCIA OUT VARCHAR2
 );
/* Verificar que todos los items del Pedido Tengan Precio Testigo. */
FUNCTION COMPED_TIENE_CTP
 (P_COMPED_ID IN NUMBER
 ,P_FECHA IN DATE := sysdate
 )
 RETURN VARCHAR2;
FUNCTION COMPED_TRAMIX_HAB_SN
 (P_SEGORG_ID IN NUMBER
 )
 RETURN VARCHAR2;
PROCEDURE COMPED_TRANSMITIR
 (P_SEGORG_ID IN NUMBER
 ,P_COMPED_ID IN NUMBER
 ,P_MOTIVO IN VARCHAR2
 ,P_INTENV_ID OUT NUMBER
 );
PROCEDURE COMPED_TRANSMITO_ANU
 (P_SEGORG_ID IN NUMBER
 ,P_COMPED_ID IN NUMBER
 ,P_INTENV_ID OUT NUMBER
 );
PROCEDURE COMPEL_GET
 (P_COMPEL OUT COM_PEDIDOS_CTL%ROWTYPE
 );
PROCEDURE COMPEL_INI;
/* Isertar registro en COM_PEDIDOS_CTL. */
PROCEDURE COMPEL_INS
 (P_COMPEL IN COM_PEDIDOS_CTL%ROWTYPE
 );
/* Seteo la variable v_comped */
PROCEDURE COMPEL_SET
 (P_ID IN NUMBER
 );
PROCEDURE COMPRE_SET
 (P_ID IN NUMBER
 );
PROCEDURE COMPRE_GET
 (P_COMPRE OUT COM_PROVEEDORES_EST%ROWTYPE
 );
PROCEDURE COMPRE_INI;
FUNCTION COMPRE_OBTN_ID
 (P_COMPRV_ID IN NUMBER
 ,P_FECHA IN DATE := sysdate
 )
 RETURN NUMBER;
PROCEDURE COMPRE_ANULAR_VLD
 (P_COMPRE_ID IN NUMBER
 ,P_MOTIVO_SITUACION IN VARCHAR2
 );
/* Anular un registro del Estado de Proveedores */
PROCEDURE COMPRE_ANULAR
 (P_COMPRE_ID IN NUMBER
 ,P_MOTIVO_SITUACION IN VARCHAR2
 );
/* Alta de Responsable de Proveedor */
PROCEDURE COMPRS_ALTA
 (P_SEGORG_CODIGO IN SEG_ORGANIZACIONES.CODIGO%TYPE
 ,P_COMPRV_ID IN COM_PROVEEDORES.ID%TYPE
 ,P_COMRST_ID IN COM_RESPONSABLES_TIPOS.ID%TYPE
 ,P_SEGPRS_NOMBRE IN COM_RESPONSABLES.NOMBRE%TYPE
 ,P_SEGPRS_TIPO_DOCUMENTO IN COM_RESPONSABLES.TIPO_DOCUMENTO%TYPE
 ,P_SEGPRS_NUMERO_DOCUMENTO IN COM_RESPONSABLES.NUMERO_DOCUMENTO%TYPE
 ,P_SEGPRS_EMAIL IN COM_RESPONSABLES.EMAIL%TYPE
 ,P_SEGPRS_OBSERVACIONES IN COM_RESPONSABLES.OBSERVACION%TYPE
 ,P_SEGUSU_USUARIO IN SEG_USUARIOS.USUARIO%TYPE
 ,P_SEGROL_CODIGO IN SEG_ROLES.CODIGO%TYPE
 ,P_SEGAPL_CODIGO IN SEG_APLICACIONES.CODIGO%TYPE
 ,P_SEGUSU_ID OUT NUMBER
 ,P_RESULTADO OUT VARCHAR2
 );
/* Dar de Baja a un Responsable de Proveedor */
PROCEDURE COMPRS_BAJA
 (P_COMPRS_ID IN COM_PROVEEDORES_RES.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 );
/* Seteo de la variable v_comprs */
PROCEDURE COMPRS_SET
 (P_ID IN COM_PROVEEDORES_RES.ID%TYPE
 );
/* Seteo de la variable v_comprs */
PROCEDURE COMPRS_SET_RESP
 (P_COMRES_ID IN COM_PROVEEDORES_RES.COMRES_ID%TYPE
 ,P_COMPRV_ID IN COM_PROVEEDORES.ID%TYPE
 ,P_SEGUSU_ID IN NUMBER
 );
FUNCTION COMPRU_OBTN_ID
 (P_COMPRV_ID IN NUMBER
 ,P_COMRUB_ID IN NUMBER
 ,P_FECHA IN DATE := sysdate
 )
 RETURN NUMBER;
PROCEDURE COMPRU_GET
 (P_COMPRU OUT COM_PROVEEDORES_RUBSUS%ROWTYPE
 );
PROCEDURE COMPRU_INI;
PROCEDURE COMPRU_INS
 (P_COMPRU IN COM_PROVEEDORES_RUBSUS%ROWTYPE
 );
PROCEDURE COMPRU_SET
 (P_ID IN NUMBER
 );
/* Restablecer Contraseña */
PROCEDURE COMPRV_RESCLV
 (P_COMPRV_ID IN NUMBER
 ,P_COMRES_ID IN NUMBER
 );
/* Inicializar la variable v_comptt */
PROCEDURE COMPTT_INI;
/* Obtener el valor de la variable v_comptt */
PROCEDURE COMPTT_GET
 (P_COMPTT OUT COM_COMPDT_COMPRT%ROWTYPE
 );
/* Insertar registro en COM_COMPDT_COMPRT */
PROCEDURE COMPTT_INS
 (P_COMPTT IN COM_COMPDT_COMPRT%ROWTYPE
 );
/* Setear la varible v_comptt */
PROCEDURE COMPTT_SET
 (P_ID IN NUMBER
 );
/* Devuelve el registro almacenado en la variable de paquete */
PROCEDURE COMRDC_GET
 (P_COMRDC OUT COM_REPLICAS_DOC%ROWTYPE
 );
/* Inicializa la variable de paquete */
PROCEDURE COMRDC_INI;
/* Agrega un nuevo registro a COM_REPLICAS_DOC */
PROCEDURE COMRDC_INS
 (P_COMRDC IN COM_REPLICAS_DOC%ROWTYPE
 );
/* Recupera un registro por su ID */
PROCEDURE COMRDC_SET
 (P_ID IN NUMBER
 );
PROCEDURE COMREP_REPLICAR
 (P_COMCLF_ID IN NUMBER
 ,P_COMREP_ID IN NUMBER
 ,P_ORIGEN IN VARCHAR2
 ,P_COMENTARIO IN VARCHAR2
 );
/* Seteo de la variable v_comred */
PROCEDURE COMRED_SET
 (P_ID IN COM_REPLICAS_DET.ID%TYPE
 );
/* Obtener el valor de la variable v_comred */
PROCEDURE COMRED_GET
 (P_COMRED OUT COM_REPLICAS_DET%ROWTYPE
 );
PROCEDURE COMRED_INI;
/* Insertar registro en COM_REPLICAS_DET */
PROCEDURE COMRED_INS
 (P_COMRED IN COM_REPLICAS_DET%ROWTYPE
 );
/* Seteo de la variable v_comrep */
PROCEDURE COMREP_SET
 (P_ID IN COM_REPLICAS.ID%TYPE
 );
/* Insertar registro en COM_REPLICAS */
PROCEDURE COMREP_INS
 (P_COMREP IN COM_REPLICAS%ROWTYPE
 );
PROCEDURE COMREP_INI;
/* Obtener el valor de la variable v_comrep */
PROCEDURE COMREP_GET
 (P_COMREP OUT COM_REPLICAS%ROWTYPE
 );
/* Determina y carga los Cortes segun las ponderancias definidas */
PROCEDURE COMRER_CARGA_CORTES
 (P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 );
/* Inicializa los Cortes con valor 0 en todos los rubros */
PROCEDURE COMRER_CORTES_INIC
 (P_FECHA_VIGENCIA IN DATE
 );
/* Determina y carga los Cortes COP segun las ponderancias definidas */
PROCEDURE COMRER_CORTES_COP
 (P_COMRUB_ID IN COM_REPUTACION_RUB.COMRUB_ID%TYPE
 ,P_CANT_PRV_RUB IN NUMBER
 ,P_FECHA_VIGENCIA IN DATE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 );
/* Determina y carga los Cortes PIM segun las ponderancias definidas */
PROCEDURE COMRER_CORTES_PIM
 (P_COMRUB_ID IN COM_REPUTACION_RUB.COMRUB_ID%TYPE
 ,P_CANT_PRV_RUB IN NUMBER
 ,P_FECHA_VIGENCIA IN DATE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 );
/* Determina y carga los Cortes POC segun las ponderancias definidas */
PROCEDURE COMRER_CORTES_POC
 (P_COMRUB_ID IN COM_REPUTACION_RUB.COMRUB_ID%TYPE
 ,P_CANT_PRV_RUB IN NUMBER
 ,P_FECHA_VIGENCIA IN DATE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 );
/* Determina y carga los Cortes POC segun las ponderancias definidas */
PROCEDURE COMRER_CORTES_POP
 (P_COMRUB_ID IN COM_REPUTACION_RUB.COMRUB_ID%TYPE
 ,P_CANT_PRV_RUB IN NUMBER
 ,P_FECHA_VIGENCIA IN DATE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 );
/* Generar grilla para reputacion */
PROCEDURE COMRRP_GENERAR
 (P_FECHA_MOV_HASTA IN DATE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_VIGENCIA IN DATE
 );
FUNCTION COMREP_ANULA_REP_SN
 (P_ID IN NUMBER
 ,P_COMREP_ID IN NUMBER
 ,P_ORIGEN IN VARCHAR2
 )
 RETURN VARCHAR2;
FUNCTION COMREP_REPLICAR_SN
 (P_COMOCM_ID IN NUMBER
 ,P_ORIGEN IN VARCHAR2
 )
 RETURN VARCHAR2;
/* Proceso de Aceptacion del Trámite Cambio CBU */
PROCEDURE COMTPR_ACEPTAR_ACCB
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_COMPRV_ID OUT COM_PROVEEDORES.ID%TYPE
 );
/* Proceso de Presentar Documentación */
PROCEDURE COMTPR_ACEPTAR_PDOC
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_COMPRV_ID OUT COM_PROVEEDORES.ID%TYPE
 );
PROCEDURE COMTDR_SET
 (P_ID IN NUMBER
 );
PROCEDURE COMTDR_INS
 (P_COMTDR IN COM_COMPDT_COMRUB%ROWTYPE
 );
PROCEDURE COMTDR_INI;
/* Obtener el valor de la variable v_comtdr */
PROCEDURE COMTDR_GET
 (P_COMTDR OUT COM_COMPDT_COMRUB%ROWTYPE
 );
/* Proceso de Aceptacion del solicitud de Inscripcion de Responsables ECO */
PROCEDURE COMTCO_INSR_ACEPTAR
 (P_COMTCO_ID IN COM_TRAMITES_CON.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 );
/* Devuelve si el documento esta presente en el tramite */
FUNCTION COMTOD_PRESENTADO_SN
 (P_COMTPR_ID IN NUMBER
 ,P_COMODT_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Proceso de Aceptacion Solicitud de Trámite Proveedor */
PROCEDURE COMTPR_ACEPTAR
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_COMPRV_ID OUT COM_PROVEEDORES.ID%TYPE
 );
/* Proceso de Aceptacion del Trámite Cambio de Domicilio Legal */
PROCEDURE COMTPR_ACEPTAR_ACDL
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 );
/* Proceso de Aceptacion del Trámite Act de Docs de Autoridades */
PROCEDURE COMTPR_ACEPTAR_ADAU
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_COMPRV_ID OUT COM_PROVEEDORES.ID%TYPE
 );
PROCEDURE COMTPR_ACEPTAR_AIAU
 (P_COMTPR_ID IN NUMBER
 ,P_RESULTADO OUT NUMBER
 ,P_COMPRV_ID OUT NUMBER
 );
/* Proceso de Aceptacion del Trámite Cambio de Domicilio Comercial */
PROCEDURE COMTPR_ACEPTAR_ALDC
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 );
/* Proceso de Aceptacion del Trámite Cambio Nombre/Razon Social */
PROCEDURE COMTPR_ACEPTAR_ACRS
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_COMPRV_ID OUT COM_PROVEEDORES.ID%TYPE
 );
/* Proceso de Aceptacion del Trámite Cambio Datos Generales del Prov */
PROCEDURE COMTPR_ACEPTAR_ACDP
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_COMPRV_ID OUT COM_PROVEEDORES.ID%TYPE
 );
/* Proceso de Aceptacion del Trámite Cambio de Responsables */
PROCEDURE COMTPR_ACEPTAR_ACRP
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 );
/* Aceptar tramite de Actualizacion de Tipos de registro. */
PROCEDURE COMTPR_ACEPTAR_ARGP
 (P_COMTPR_ID IN NUMBER
 ,P_COMPRV_ID OUT NUMBER
 ,P_RESULTADO OUT VARCHAR2
 );
/* Proceso Baja de Objetos de Especialidades */
PROCEDURE COMTPR_ACEPTAR_BJOB
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_COMPRV_ID OUT COM_PROVEEDORES.ID%TYPE
 );
/* Proceso de Aceptacion del Trámite Inscripcion de Categorías */
PROCEDURE COMTPR_ACEPTAR_INCT
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_COMPRV_ID OUT COM_PROVEEDORES.ID%TYPE
 );
/* Proceso Inscripción de Objetos de Especialidades */
PROCEDURE COMTPR_ACEPTAR_INOB
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_COMPRV_ID OUT COM_PROVEEDORES.ID%TYPE
 );
/* Proceso de Aceptacion del Trámite Presentacion Documentos Internos */
PROCEDURE COMTPR_ACEPTAR_PDOI
 (P_COMTPR_ID IN COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 ,P_COMPRV_ID OUT COM_PROVEEDORES.ID%TYPE
 );
PROCEDURE COMTPR_ACEPTAR_PROB
 (P_COMTPR_ID IN NUMBER
 ,P_RESULTADO OUT VARCHAR2
 ,P_COMPRV_ID OUT NUMBER
 );
/* Anular trámite de Actualización de Documentos de Autoridades. */
PROCEDURE COMTPR_ANULAR_ADAU
 (P_COMTPR_ID IN NUMBER
 );
/* Proceso de Creación de Trámite Proveedor por Tipo */
PROCEDURE COMTPR_CREAR
 (P_COMPRV_ID IN COM_PROVEEDORES.ID%TYPE
 ,P_COMTPR_TIPO IN COM_TRAMITES_PRV_TIPO.CODIGO%TYPE
 ,P_COMTPR_ID OUT COM_TRAMITES_PRV.ID%TYPE
 ,P_RESULTADO OUT VARCHAR2
 );
/* Autenticar usuario y su entidad contratante */
FUNCTION AUTH_SEGUSU_ECO
 (P_USERNAME IN VARCHAR2
 ,P_PASSWORD IN VARCHAR2
 )
 RETURN BOOLEAN;
FUNCTION BLOB2CLOBBASE64
 (P_BLOB IN BLOB
 )
 RETURN CLOB;
/* Obtener el anterior día hábil. */
FUNCTION DIA_HABIL_ANTERIOR
 (P_FECHA IN COM_FERIADOS.FECHA%TYPE
 ,P_SEGORG_ID IN COM_FERIADOS.SEGORG_ID%TYPE
 ,P_CANTIDAD IN NUMBER
 )
 RETURN DATE;
/* Obtener el próximo día hábil. */
FUNCTION DIA_HABIL_PROXIMO
 (P_FECHA IN COM_FERIADOS.FECHA%TYPE
 ,P_SEGORG_ID IN COM_FERIADOS.SEGORG_ID%TYPE
 ,P_CANTIDAD IN NUMBER := 1
 )
 RETURN DATE;
/* Determinar si una fecha es un día habil. */
FUNCTION ES_DIA_HABIL
 (P_FECHA IN COM_FERIADOS.FECHA%TYPE
 ,P_SEGORG_ID IN COM_FERIADOS.SEGORG_ID%TYPE
 )
 RETURN BOOLEAN;
FUNCTION FORM_URL_DECODE
 (P_DATA IN VARCHAR2
 ,P_CHARSET IN VARCHAR2
 )
 RETURN VARCHAR2;
FUNCTION FORM_URL_ENCODE
 (P_DATA IN VARCHAR2
 ,P_CHARSET IN VARCHAR2
 )
 RETURN VARCHAR2;
/* Configuración de los días feriados inamovibles. */
PROCEDURE INIC_FERIADOS_ANUAL;
/* Configuración de los días feriados trasladables 2009. */
PROCEDURE INIC_FERIADOS_2009;
/* Procesar los precios testigos de la tabla COM_CATALOGO_PRECIOSACTL. */
PROCEDURE PROC_COMCPA
 (P_SEGORG_ID IN number
 ,P_CODIGO IN COM_CATALOGO_PRECIOSACTL.CODIGO%TYPE
 ,P_FECHA_VIGENCIA IN DATE := 'SYSDATE'
 ,P_FECHA_VALIDEZ IN DATE
 );
/* Procesar la planilla para Importar precios testigos al catalogo. */
PROCEDURE PROC_COMDOC_CTP
 (P_SEGORG_ID IN NUMBER
 ,P_ID IN COM_DOCUMENTOS.ID%TYPE
 ,P_SEPARADOR IN VARCHAR2 := ';'
 ,P_MENSAJE OUT VARCHAR2
 ,P_PROCESADO OUT VARCHAR2
 ,P_CODIGO OUT COM_CATALOGO_PRECIOSACTL.CODIGO%TYPE
 );
/* Dar Baja a un Proveedor */
PROCEDURE BAJ_PRV
 (P_COMPRV_ID IN NUMBER
 ,P_DESCRIPCION IN VARCHAR2
 );
/* Habilitar un Proveedor */
PROCEDURE HAB_PRV
 (P_COMPRV_ID IN COM_PROVEEDORES_EST.COMPRV_ID%TYPE
 ,P_DESCRIPCION IN COM_PROVEEDORES_EST.DESCRIPCION%TYPE
 );
/* Suspender un Proveedor */
PROCEDURE SUS_PRV
 (P_COMPRV_ID IN COM_PROVEEDORES_EST.COMPRV_ID%TYPE
 ,P_FECHA_VIGENCIA IN COM_PROVEEDORES_EST.FECHA_VIGENCIA%TYPE
 ,P_DESCRIPCION IN COM_PROVEEDORES_EST.DESCRIPCION%TYPE
 ,P_FECHA_VALIDEZ IN COM_PROVEEDORES_EST.FECHA_VALIDEZ%TYPE
 );
/* Dar Baja a una Unidad Ejecutora. */
PROCEDURE BAJ_ECO
 (P_COMECO_ID IN COM_CONTRATANTES.ID%TYPE
 ,P_DESCRIPCION IN VARCHAR2
 );
/* Habilitar una Entidad Contratante . */
PROCEDURE HAB_ECO
 (P_COMECO_ID IN COM_CONTRATANTES.ID%TYPE
 ,P_DESCRIPCION IN VARCHAR2
 );
/* Suspender una Entidad Contratante. */
PROCEDURE SUS_ECO
 (P_COMECO_ID IN COM_CONTRATANTES.ID%TYPE
 ,P_FECHA_VALIDEZ IN COM_CONTRATANTES_EST.FECHA_VALIDEZ%TYPE
 ,P_DESCRIPCION IN VARCHAR2
 ,P_FECHA_VIGENCIA IN COM_CONTRATANTES_EST.FECHA_VIGENCIA%TYPE
 );
/* Convertir de un BLOB a un CLOB. */
FUNCTION GET_BLOB_TO_CLOB
 (P_BLOB IN BLOB
 )
 RETURN CLOB;
PROCEDURE GET_COMOCE
 (P_COMOCE OUT COM_ORDENES_COMPRAS_EST%ROWTYPE
 );
PROCEDURE GET_COMCIT
 (P_COMCIT OUT COM_CATALOGO_ITEMS%ROWTYPE
 );
PROCEDURE SET_COMCIT
 (P_COMCIT_ID IN NUMBER
 );
/* Obtener el valor de la variable v_comcmo. */
PROCEDURE GET_COMCMO
 (P_COMCMO OUT COM_CALIFICACIONES_MOT%ROWTYPE
 );
/* Obtener el valor de la variable v_comctm. */
PROCEDURE GET_COMCTM
 (P_COMCTM OUT COM_CALIFICACIONES_TMO%ROWTYPE
 );
/* Obtener el valor de la variable v_comrrp */
PROCEDURE GET_COMRRP
 (P_COMRRP OUT COM_REPUTACION_RUBPRV%ROWTYPE
 );
/* Obtener el valor de la variable v_comrer */
PROCEDURE GET_COMRER
 (P_COMRER OUT COM_REPUTACION_RUB%ROWTYPE
 );
/* Obtener el valor de la variable v_comclf */
PROCEDURE GET_COMCLF
 (P_COMCLF OUT COM_CALIFICACIONES%ROWTYPE
 );
PROCEDURE GET_COMOCM
 (P_COMOCM OUT COM_ORDENES_COMPRAS%ROWTYPE
 );
PROCEDURE GET_COMCOE
 (P_COMCOE OUT COM_CONTRATACIONES_EST%ROWTYPE
 );
PROCEDURE GET_COMECE
 (P_COMECE OUT COM_CONTRATANTES_EST%ROWTYPE
 );
PROCEDURE SET_COMECE
 (P_ID IN NUMBER
 );
PROCEDURE GET_COMECO
 (P_COMECO OUT COM_CONTRATANTES%ROWTYPE
 );
PROCEDURE GET_COMPED
 (P_COMPED OUT COM_PEDIDOS%ROWTYPE
 );
PROCEDURE GET_COMPEE
 (P_COMPEE OUT COM_PEDIDOS_EST%ROWTYPE
 );
PROCEDURE GET_COMEJE
 (P_COMEJE OUT COM_EJERCICIOS%ROWTYPE
 );
/* Obtener el valor de la variable v_comprv */
PROCEDURE GET_COMPRV
 (P_COMPRV OUT COM_PROVEEDORES%ROWTYPE
 );
PROCEDURE GET_COMCON
 (P_COMCON OUT COM_CONTRATACIONES%ROWTYPE
 );
/* Obtener el valor de la variable v_comctp */
PROCEDURE GET_COMCTP
 (P_COMCTP OUT COM_CATALOGO_PRECIOS%ROWTYPE
 );
/* Obtener el valor de la variable v_comccr */
PROCEDURE GET_COMCCR
 (P_COMCCR OUT COM_CONTRATANTES_CATRES%ROWTYPE
 );
/* Obtener el valor de la variable v_comcpa */
PROCEDURE GET_COMCPA
 (P_COMCPA OUT COM_CATALOGO_PRECIOSACTL%ROWTYPE
 );
/* Obtener el valor de la variable v_comtco */
PROCEDURE GET_COMTCO
 (P_COMTCO OUT COM_TRAMITES_CON%ROWTYPE
 );
/* Obtener el valor de la variable v_comres */
PROCEDURE GET_COMRES
 (P_COMRES OUT COM_RESPONSABLES%ROWTYPE
 );
/* Obtener el valor de la variable v_comprs */
PROCEDURE GET_COMPRS
 (P_COMPRS OUT COM_PROVEEDORES_RES%ROWTYPE
 );
/* Obtener el valor de la variable v_cometq */
PROCEDURE GET_COMETQ
 (P_COMETQ OUT COM_ETIQUETAS%ROWTYPE
 );
/* Obtener el valor de la variable v_comcnr */
PROCEDURE GET_COMCNR
 (P_COMCNR OUT COM_CONTRATANTES_RES%ROWTYPE
 );
/* Obtener el valor de la variable v_comres */
PROCEDURE GET_COMRST
 (P_COMRST OUT COM_RESPONSABLES_TIPOS%ROWTYPE
 );
/* Obtener valores de la variable v_comfer. */
PROCEDURE GET_COMFER
 (P_COMFER OUT COM_FERIADOS%ROWTYPE
 );
/* Obtener el valor de la variable v_comprt */
PROCEDURE GET_COMPRT
 (P_COMPRT OUT COM_PROVEEDORES_TIPOS%ROWTYPE
 );
/* Obtener el valor de la variable v_comtpr */
PROCEDURE GET_COMTPR
 (P_COMTPR OUT COM_TRAMITES_PRV%ROWTYPE
 );
PROCEDURE INI_COMOCE;
PROCEDURE INI_COMCIT;
PROCEDURE INI_COMCMO;
PROCEDURE INI_COMCTM;
PROCEDURE INI_COMRRP;
PROCEDURE INI_COMRER;
PROCEDURE INI_COMCLF;
PROCEDURE INI_COMCOE;
PROCEDURE INI_COMEJE;
PROCEDURE INI_COMOCM;
PROCEDURE INI_COMPED;
PROCEDURE INI_COMPEE;
PROCEDURE INI_COMECE;
PROCEDURE INI_COMECO;
PROCEDURE INI_COMPRV;
PROCEDURE INI_COMCON;
/* Inicializar la variable v_comcpa. */
PROCEDURE INI_COMCPA;
/* Inicializar la variable v_comctp. */
PROCEDURE INI_COMCTP;
/* Inicializar la variable v_comtco. */
PROCEDURE INI_COMTCO;
PROCEDURE INI_COMPRT;
PROCEDURE INI_COMETQ;
PROCEDURE INI_COMRST;
/* Inicializa la variablr v_comfer. */
PROCEDURE INI_COMFER;
PROCEDURE INI_COMTPR;
PROCEDURE INI_COMRES;
/* Insertar registro en COM_CALIFICACIONES_MOT. */
PROCEDURE INS_COMCMO
 (P_COMCMO IN COM_CALIFICACIONES_MOT%ROWTYPE
 );
/* Insertar registro en COM_CALIFICACIONES_TMO. */
PROCEDURE INS_COMCTM
 (P_COMCTM IN COM_CALIFICACIONES_TMO%ROWTYPE
 );
/* Insertar registro en COM_REPUTACION_RUBPRV */
PROCEDURE INS_COMRRP
 (P_COMRRP IN COM_REPUTACION_RUBPRV%ROWTYPE
 );
/* Insertar registro en COM_REPUTACION_RUB */
PROCEDURE INS_COMRER
 (P_COMRER IN COM_REPUTACION_RUB%ROWTYPE
 );
/* Insertar registro en COM_CALIFICACIONES */
PROCEDURE INS_COMCLF
 (P_COMCLF IN COM_CALIFICACIONES%ROWTYPE
 );
/* Insertar registro en COM_CATALOGO_PRECIOSACTL. */
PROCEDURE INS_COMCPA
 (P_COMCPA IN COM_CATALOGO_PRECIOSACTL%ROWTYPE
 );
/* Insertar registro en COM_FERIADOS. */
PROCEDURE INS_COMFER
 (P_COMFER IN COM_FERIADOS%ROWTYPE
 );
/* Insertar registro en COM_CATLOGO_PRECIOS */
PROCEDURE INS_COMCTP
 (P_COMCTP IN COM_CATALOGO_PRECIOS%ROWTYPE
 );
/* Insertar  registro en COM_CONTRATANTES_CATRES */
PROCEDURE INS_COMCCR
 (P_COMCCR IN COM_CONTRATANTES_CATRES%ROWTYPE
 );
/* Insertar registro en COM_TRAMITES_PRV_TIPOR */
PROCEDURE INS_COMRPT
 (P_COMRPT IN COM_TRAMITES_PRV_TIPOR%ROWTYPE
 );
/* Insertar registro en COM_ORDENES_COMPRAS */
PROCEDURE INS_COMOCM
 (P_COMOCM IN COM_ORDENES_COMPRAS%ROWTYPE
 );
/* Insertar restros en COM_ORDENES_COMPRAS_EST */
PROCEDURE INS_COMOCE
 (P_COMOCE IN COM_ORDENES_COMPRAS_EST%ROWTYPE
 );
/* Insertar registros en COM_ORDENES_COMPRAS_DET */
PROCEDURE INS_COMOCD
 (P_COMOCD IN COM_ORDENES_COMPRAS_DET%ROWTYPE
 );
/* Insertar registro en COM_ADJUDICACIONES_DET */
PROCEDURE INS_COMADD
 (P_COMADD IN COM_ADJUDICACIONES_DET%ROWTYPE
 );
/* insertar registro en COM_ADJUDICACIONES */
PROCEDURE INS_COMADJ
 (P_COMADJ IN COM_ADJUDICACIONES%ROWTYPE
 );
/* Insertar registro en COM_COTIZACIONES */
PROCEDURE INS_COMCTZ
 (P_COMCTZ IN COM_COTIZACIONES%ROWTYPE
 );
/* Insertar registro en COM_COTIZACIONES_DOC. */
PROCEDURE INS_COMCZC
 (P_COMCZC IN COM_COTIZACIONES_DOC%ROWTYPE
 );
/* Insertar registro en COM_COTIZACIONES_DETALLES */
PROCEDURE INS_COMCZD
 (P_COMCZD IN COM_COTIZACIONES_DETALLES%ROWTYPE
 );
/* Insertar registro en la tabla COM_PEDIDOS_DAT */
PROCEDURE INS_COMPDA
 (P_COMPDA IN COM_PEDIDOS_DAT%ROWTYPE
 );
/* Insertar registro en COM_CONTRATACIONES_INV. */
PROCEDURE INS_COMCOI
 (P_COMCOI IN COM_CONTRATACIONES_INV%ROWTYPE
 );
/* Insertar registro en COM_CONTRATACIONES_DOC. */
PROCEDURE INS_COMCOD
 (P_COMCOD IN COM_CONTRATACIONES_DOC%ROWTYPE
 );
/* Insertar registro en COM_CONTRATACIONES */
PROCEDURE INS_COMCON
 (P_COMCON IN COM_CONTRATACIONES%ROWTYPE
 );
/* Insertar registro en COM_CONTRATACIONES_EST */
PROCEDURE INS_COMCOE
 (P_COMCOE IN COM_CONTRATACIONES_EST%ROWTYPE
 );
/* Insertar registro en COM_CONTRATACIONES_DETALLES */
PROCEDURE INS_COMCOT
 (P_COMCOT IN COM_CONTRATACIONES_DETALLES%ROWTYPE
 );
/* Insertar registro en COM_CONTRATACIONES_TIPOS. */
PROCEDURE INS_COMCTT
 (P_COMCTT IN COM_CONTRATACIONES_TIPOS%ROWTYPE
 );
/* Insertar registro en COM_PEDIDOS_DOC. */
PROCEDURE INS_COMPEC
 (P_COMPEC IN COM_PEDIDOS_DOC%ROWTYPE
 );
/* Isertar registro en COM_PEDIDOS. */
PROCEDURE INS_COMPED
 (P_COMPED IN COM_PEDIDOS%ROWTYPE
 );
/* Insertar registro en COM_PEDIDOS_EST */
PROCEDURE INS_COMPEE
 (P_COMPEE IN COM_PEDIDOS_EST%ROWTYPE
 );
/* Insertar registro en COM_PEDIDOS_DETALLES. */
PROCEDURE INS_COMPET
 (P_COMPET IN COM_PEDIDOS_DETALLES%ROWTYPE
 );
/* Insertar registyro en COM_CATALOGO_OBJETOS. */
PROCEDURE INS_COMCOB
 (P_COMCOB IN COM_CATALOGO_OBJETOS%ROWTYPE
 );
/* Insertar registro en COM_CONTRATANTES_EST */
PROCEDURE INS_COMECE
 (P_COMECE IN COM_CONTRATANTES_EST%ROWTYPE
 );
/* Insertar registro en COM_CATALOGO_ITEMS. */
PROCEDURE INS_COMCIT
 (P_COMCIT IN COM_CATALOGO_ITEMS%ROWTYPE
 );
/* Insertar registro en com_rubcob. */
PROCEDURE INS_COMRCB
 (P_COMRCB IN COM_RUBCOB%ROWTYPE
 );
/* Insertar registro en COM_CATALOGO_CLASES. */
PROCEDURE INS_COMCCL
 (P_COMCCL IN COM_CATALOGO_CLASES%ROWTYPE
 );
/* Insertar  registro en COM_CONTRATANTES_RES */
PROCEDURE INS_COMCNR
 (P_COMCNR IN COM_CONTRATANTES_RES%ROWTYPE
 );
/* Insertar registro en COM_CONTRATANTES_TIPOS */
PROCEDURE INS_COMCNT
 (P_COMCNT IN COM_CONTRATANTES_TIPOS%ROWTYPE
 );
/* Insertar registro en COM_ETIQUETAS */
PROCEDURE INS_COMETQ
 (P_COMETQ IN COM_ETIQUETAS%ROWTYPE
 );
/* Insertar registro en COM_CONTRATANTES_TREQ. */
PROCEDURE INS_COMCTR
 (P_COMCTR IN COM_CONTRATANTES_TREQ%ROWTYPE
 );
/* Insertar registro en COM_DOCUMENTOS_TIPOS */
PROCEDURE INS_COMDCT
 (P_COMDCT IN COM_DOCUMENTOS_TIPOS%ROWTYPE
 );
/* Insertar registro en COM_DOMICILIOS_TIPOS */
PROCEDURE INS_COMDMT
 (P_COMDMT IN COM_DOMICILIOS_TIPOS%ROWTYPE
 );
/* Insertar registro en COM_DOCUMENTOS. */
PROCEDURE INS_COMDOC
 (P_COMDOC IN COM_DOCUMENTOS%ROWTYPE
 );
/* Insertar registro en COM_DOMICILIOS */
PROCEDURE INS_COMDOM
 (P_COMDOM IN COM_DOMICILIOS%ROWTYPE
 );
/* Insertar registro en COM_CONTRATANTES_CAT. */
PROCEDURE INS_COMECC
 (P_COMECC IN COM_CONTRATANTES_CAT%ROWTYPE
 );
/* Insertar registro en COM_CONTRATANTES */
PROCEDURE INS_COMECO
 (P_COMECO IN COM_CONTRATANTES%ROWTYPE
 );
/* Insertar registro en COM_CONTRATANTES_VINC */
PROCEDURE INS_COMECV
 (P_COMECV IN COM_CONTRATANTES_VINC%ROWTYPE
 );
/* Insertar registro en COM_PROVEEDORES_DOM */
PROCEDURE INS_COMPRD
 (P_COMPRD IN COM_PROVEEDORES_DOM%ROWTYPE
 );
/* Insertar registro en COM_PROVEEDORES_EST */
PROCEDURE INS_COMPRE
 (P_COMPRE IN COM_PROVEEDORES_EST%ROWTYPE
 );
/* Insertar registro en COM_PROVEEDORES_RUB */
PROCEDURE INS_COMPRR
 (P_COMPRR IN COM_PROVEEDORES_RUB%ROWTYPE
 );
/* Insertar registro en COM_PROVEEDORES_RES */
PROCEDURE INS_COMPRS
 (P_COMPRS IN COM_PROVEEDORES_RES%ROWTYPE
 );
/* Insertar registro en COM_PROVEEDORES_TIPOS */
PROCEDURE INS_COMPRT
 (P_COMPRT IN COM_PROVEEDORES_TIPOS%ROWTYPE
 );
/* Insertar registro en COM_PROVEEDORES */
PROCEDURE INS_COMPRV
 (P_COMPRV IN COM_PROVEEDORES%ROWTYPE
 );
/* Insertar registro en COM_PROVEEDORES_TREQ */
PROCEDURE INS_COMPTR
 (P_COMPTR IN COM_PROVEEDORES_TREQ%ROWTYPE
 );
/* Insertar registro en COM_RUBROS_CAT */
PROCEDURE INS_COMRBC
 (P_COMRBC IN COM_RUBROS_CAT%ROWTYPE
 );
/* Insertar registro en COM_RESPONSABLES */
PROCEDURE INS_COMRES
 (P_COMRES IN COM_RESPONSABLES%ROWTYPE
 );
/* Insertar registro en COM_RESPONSABLES_TIPOS */
PROCEDURE INS_COMRST
 (P_COMRST IN COM_RESPONSABLES_TIPOS%ROWTYPE
 );
/* Insertar registro en COM_RUBROS */
PROCEDURE INS_COMRUB
 (P_COMRUB IN COM_RUBROS%ROWTYPE
 );
/* Insertar registro en COM_TRAMITES_PRV_OBD */
PROCEDURE INS_COMTOD
 (P_COMTOD IN COM_TRAMITES_PRV_OBD%ROWTYPE
 );
PROCEDURE INS_COMTCS
 (P_COMTCS IN COM_TRAMITES_CON_RES%ROWTYPE
 );
/* Insertar registro en  COM_TRAMITES_CON */
PROCEDURE INS_COMTCO
 (P_COMTCO IN COM_TRAMITES_CON%ROWTYPE
 );
/* Insertar registro en COM_TRAMITES_PRV_RUB */
PROCEDURE INS_COMTPB
 (P_COMTPB IN COM_TRAMITES_PRV_RUB%ROWTYPE
 );
/* Insertar registro en  COM_TRAMITES_PRV_DOM */
PROCEDURE INS_COMTPD
 (P_COMTPD IN COM_TRAMITES_PRV_DOM%ROWTYPE
 );
/* Insertar registro en COM_TRAMITES_PRV_RGP */
PROCEDURE INS_COMTPG
 (P_COMTPG IN COM_TRAMITES_PRV_RGP%ROWTYPE
 );
/* Insertar registro en COM_TRAMITES_PRV_OBJ */
PROCEDURE INS_COMTPO
 (P_COMTPO IN COM_TRAMITES_PRV_OBJ%ROWTYPE
 );
/* Insertar registro en  COM_TRAMITES_PRV */
PROCEDURE INS_COMTPR
 (P_COMTPR IN COM_TRAMITES_PRV%ROWTYPE
 );
/* Insertar registro en COM_TRAMITES_PRV_TIPO */
PROCEDURE INS_COMTPT
 (P_COMTPT IN COM_TRAMITES_PRV_TIPO%ROWTYPE
 );
/* Insertar registro en COM_TRAMITES_PRV_RES */
PROCEDURE INS_COMTPS
 (P_COMTPS IN COM_TRAMITES_PRV_RES%ROWTYPE
 );
/* Insertar registro en COM_TERRITORIOS */
PROCEDURE INS_COMTRR
 (P_COMTRR IN COM_TERRITORIOS%ROWTYPE
 );
PROCEDURE SET_COMOCE
 (P_ID IN NUMBER
 );
/* Seteo de la variable v_comcmo. */
PROCEDURE SET_COMCMO
 (P_ID IN COM_CALIFICACIONES_MOT.ID%TYPE
 );
PROCEDURE SET_COMCMO_CLF
 (P_COMCLF_ID IN COM_CALIFICACIONES_MOT.COMCLF_ID%TYPE
 ,P_COMCTM_ID IN COM_CALIFICACIONES_MOT.COMCTM_ID%TYPE
 );
/* Seteo de la variable v_comctm. */
PROCEDURE SET_COMCTM
 (P_ID IN COM_CALIFICACIONES_TMO.ID%TYPE
 );
PROCEDURE SET_COMCTM_CODIGO
 (P_SEGORG_ID IN COM_CALIFICACIONES_TMO.SEGORG_ID%TYPE
 ,P_CODIGO IN COM_CALIFICACIONES_TMO.CODIGO%TYPE
 );
PROCEDURE SET_COMCTM_NOMBRE
 (P_SEGORG_ID IN COM_CALIFICACIONES_TMO.SEGORG_ID%TYPE
 ,P_CALIFICACION IN COM_CALIFICACIONES_TMO.CALIFICACION%TYPE
 ,P_NOMBRE IN COM_CALIFICACIONES_TMO.NOMBRE%TYPE
 );
/* Seteo la variable v_comrrp */
PROCEDURE SET_COMRRP
 (P_ID IN COM_REPUTACION_RUBPRV.ID%TYPE
 );
/* Seteo la variable v_comrer */
PROCEDURE SET_COMRER
 (P_ID IN COM_REPUTACION_RUB.ID%TYPE
 );
/* Seteo de la variable v_comclf */
PROCEDURE SET_COMCLF
 (P_ID IN COM_CALIFICACIONES.ID%TYPE
 );
/* Seteo la variable v_comeco */
PROCEDURE SET_COMECO_CODIGO
 (P_CODIGO IN VARCHAR2
 );
PROCEDURE SET_COMOCM
 (P_ID IN NUMBER
 );
PROCEDURE SET_COMOCM_CODIGO
 (P_SEGORG_ID IN NUMBER
 ,P_CODIGO IN VARCHAR2
 ,P_EJERCICIO IN NUMBER
 );
PROCEDURE SET_COMCOE
 (P_ID IN NUMBER
 );
/* Seteo la variable v_comcon */
PROCEDURE SET_COMCON_CODIGO
 (P_SEGORG_ID IN NUMBER
 ,P_EJERCICIO IN NUMBER
 ,P_CODIGO IN VARCHAR2
 );
/* Seteo la variable v_comped */
PROCEDURE SET_COMPED_CODIGO
 (P_SEGORG_ID IN NUMBER
 ,P_EJERCICIO IN NUMBER
 ,P_CODIGO IN VARCHAR2
 );
/* Seteo la variable v_comped */
PROCEDURE SET_COMPED
 (P_ID IN NUMBER
 );
/* Seteo la variable v_compee */
PROCEDURE SET_COMPEE
 (P_ID IN NUMBER
 );
/* Seteo la variable v_comres */
PROCEDURE SET_COMEJE_EJERCICIO
 (P_SEGORG_ID IN NUMBER
 ,P_EJERCICIO IN NUMBER
 );
/* Seteo la variable v_comprv */
PROCEDURE SET_COMPRV
 (P_ID IN COM_PROVEEDORES.ID%TYPE
 );
PROCEDURE SET_COMCPA_CODIGO
 (P_SEGORG_ID IN NUMBER
 ,P_CODIGO IN COM_CATALOGO_PRECIOSACTL.CODIGO%TYPE
 ,P_NRO_LINEA IN COM_CATALOGO_PRECIOSACTL.NRO_LINEA%TYPE
 );
/* Seteo de la variable v_comcnr */
PROCEDURE SET_COMCCR
 (P_ID IN COM_CONTRATANTES_CATRES.ID%TYPE
 );
PROCEDURE SET_COMCON
 (P_COMCON_ID IN NUMBER
 );
/* Seteo de la variable v_comctp */
PROCEDURE SET_COMCTP
 (P_ID IN NUMBER
 );
/* Seteo de la variable v_comcnr */
PROCEDURE SET_COMCCR_RESP
 (P_COMRES_ID IN NUMBER
 ,P_COMECC_ID IN NUMBER
 ,P_SEGUSU_ID IN NUMBER
 );
/* Seteo de la variable v_comcnr */
PROCEDURE SET_COMCNR
 (P_ID IN COM_CONTRATANTES_RES.ID%TYPE
 );
/* Seteo de la variable v_comcnr */
PROCEDURE SET_COMCNR_RESP
 (P_COMRES_ID IN NUMBER
 ,P_COMECO_ID IN COM_CONTRATANTES.ID%TYPE
 ,P_SEGUSU_ID IN NUMBER
 );
/* Seteo la variable v_comtco */
PROCEDURE SET_COMTCO
 (P_ID IN COM_TRAMITES_CON.ID%TYPE
 );
PROCEDURE SET_COMRST_CODIGO
 (P_CODIGO IN VARCHAR2
 ,P_SEGORG_ID IN NUMBER
 );
/* Setea la variable v_comfer por fecha. */
PROCEDURE SET_COMFER_FECHA
 (P_FECHA IN COM_FERIADOS.FECHA%TYPE
 );
PROCEDURE SET_COMETQ_CODIGO
 (P_CODIGO IN VARCHAR2
 ,P_SEGORG_ID IN NUMBER
 );
/* Seteo la variable v_comprt */
PROCEDURE SET_COMPRT
 (P_ID IN COM_PROVEEDORES_TIPOS.ID%TYPE
 );
/* Seteo la variable v_comres */
PROCEDURE SET_COMRES
 (P_ID IN COM_RESPONSABLES.ID%TYPE
 );
/* Seteo la variable v_comres */
PROCEDURE SET_COMRES_DOC
 (P_COMRST_ID IN COM_RESPONSABLES.COMRST_ID%TYPE
 ,P_NUMERO_DOCUMENTO IN COM_RESPONSABLES.NUMERO_DOCUMENTO%TYPE
 ,P_TIPO_DOCUMENTO IN COM_RESPONSABLES.TIPO_DOCUMENTO%TYPE
 );
/* Seteo la variable v_comrpr */
PROCEDURE SET_COMTPR
 (P_ID IN COM_TRAMITES_PRV.ID%TYPE
 );
/* Obtener el documento pdf en binario. */
FUNCTION OBTN_COMADJ_DOC_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el documento pdf en binario. */
FUNCTION OBTN_COMANU_DOC_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener Precio Sugerido para un Item */
FUNCTION OBTN_COMCIT_PRECIO_SUGERIDO
 (P_COMCIT_ID IN NUMBER
 ,P_FECHA IN DATE := sysdate
 )
 RETURN NUMBER;
/* Obtener Precio Testigo para un Item por Zona */
FUNCTION OBTN_COMCIT_PRECIO_TESTIGO
 (P_COMCIT_ID IN NUMBER
 ,P_FECHA IN DATE := sysdate
 )
 RETURN NUMBER;
/* Obtener Precio Sugerido para un Item */
FUNCTION OBTN_COMCIT_PRECIO
 (P_COMCIT_ID IN NUMBER
 ,P_FECHA IN DATE := sysdate
 )
 RETURN NUMBER;
FUNCTION OBTN_COMCLF_CLFMOT_2
 (P_COMOCM_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Obtener el documento pdf en binario de Contratacion No Adjudicada */
FUNCTION OBTN_COMCON_DES_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el documento pdf en binario. */
FUNCTION OBTN_COMCTZ_DOC_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMCTZ_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el documento pdf en binario. */
FUNCTION OBTN_COMCZD_DOC_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 )
 RETURN NUMBER;
FUNCTION OBTN_COMECE_ESTADO
 (P_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Obtener el documento pdf en binario. */
FUNCTION OBTN_COMOCM_CONTRATO_DOC_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMOCM_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el documento pdf en binario. */
FUNCTION OBTN_COMOCM_DOC_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMOCM_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el documento pdf en binario. */
FUNCTION OBTN_OCMANU_DOC_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMOCM_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el documento pdf en binario. */
FUNCTION OBTN_OCMNOC_DOC_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMOCM_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el documento pdf en binario de Contratacion No Adjudicada */
FUNCTION OBTN_COMCON_NAD_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el documento pdf en binario. */
FUNCTION OBTN_COMCON_DOC_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el documento pdf en binario de anulacion de Pedido. */
FUNCTION OBTN_COMPED_DOC_ANU_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMPED_ID IN NUMBER
 ,P_COMPEE_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el documento pdf en binario. */
FUNCTION OBTN_COMPED_DOC_PDF
 (P_SEGORG_ID IN NUMBER
 ,P_COMPED_ID IN NUMBER
 )
 RETURN NUMBER;
FUNCTION OBTN_XML_VALIDA_ASIENTO_PARTID
 (P_VALIDA IN VARCHAR2
 ,P_EJERCICIO IN VARCHAR2
 ,P_EXPEDIENTE IN VARCHAR2
 ,P_RESOLUCION IN VARCHAR2
 ,P_CONTRATANTE IN VARCHAR2
 ,P_PARTIDA1 IN VARCHAR2
 ,P_PARTIDA2 IN VARCHAR2
 ,P_PARTIDA3 IN VARCHAR2
 ,P_PARTIDA4 IN VARCHAR2
 ,P_PARTIDA5 IN VARCHAR2
 ,P_PARTIDA6 IN VARCHAR2
 ,P_PARTIDA7 IN VARCHAR2
 ,P_PARTIDA8 IN VARCHAR2
 ,P_PARTIDA9 IN VARCHAR2
 ,P_PARTIDA10 IN VARCHAR2
 ,P_SEGORG_ID IN NUMBER
 )
 RETURN VARCHAR2;
FUNCTION OBTN_COMCON_PERIODO_ACLARAC_SN
 (P_SEGORG_ID IN NUMBER
 ,P_COMCON_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Formato html del estado de la replica */
FUNCTION OBTN_COMREP_ESTADO
 (P_COMOCM_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Obtener los telefonos de un proveedor */
FUNCTION OBTN_COMPRV_TELEFONOS
 (P_COMPRV_ID IN NUMBER
 )
 RETURN VARCHAR2;
FUNCTION OBTN_DOC_FEC_VENC_ULT_DOC_HAB
 (P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 )
 RETURN DATE;
FUNCTION OBTN_DOC_FECHA_VENC
 (P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 )
 RETURN VARCHAR2;
FUNCTION OBTN_DOC_ADEUDADO
 (P_SEGORG_ID IN NUMBER
 ,P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Obtener la fecha de vencimiento de un documento. */
FUNCTION OBTN_DOC_VENCIDO_SN
 (P_SEGORG_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 ,P_FECHA_EMISION IN VARCHAR2
 )
 RETURN VARCHAR2;
FUNCTION OBTN_COMDOC_CANT_ADE
 (P_COMPRV_ID IN NUMBER
 )
 RETURN INTEGER;
/* Obtener el ultimo documento presentado para un proveedor y tipo de doc */
FUNCTION OBTN_COMPDO_PDTPRV
 (P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 )
 RETURN NUMBER;
/* Saber si el proveedor tiene la documentacion al dia o no. */
FUNCTION OBTN_DOC_AL_DIA_SN
 (P_SEGORG_ID IN NUMBER
 ,P_COMPRV_ID IN NUMBER
 )
 RETURN VARCHAR2;
FUNCTION OBTN_COMPDE_ID
 (P_COMPDT_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el estado de la documentacion del proveedor. */
FUNCTION OBTN_COMDOC_EST_HIS
 (P_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Obtener la fecha de vencimiento de un documento. */
FUNCTION OBTN_FECHA_VENC_DOC
 (P_SEGORG_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 ,P_FECHA_EMISION IN VARCHAR2
 )
 RETURN VARCHAR2;
/* Obtener el estado de la documentacion del proveedor. */
FUNCTION OBTN_COMDOC_NO_FMT
 (P_SEGORG_ID IN NUMBER
 ,P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 ,P_FECHA IN DATE := SYSDATE
 )
 RETURN VARCHAR2;
/* Obtener el estado de la documentacion del proveedor. */
FUNCTION OBTN_COMDOC_ESTADO
 (P_SEGORG_ID IN NUMBER
 ,P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Determinar si un tipo de documento es obligatorio */
FUNCTION OBTN_COMPDT_OBL_SN
 (P_COMPRV_ID IN NUMBER
 ,P_COMPDT_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Obtener el numero de Adjudicacion de su numerador */
FUNCTION OBTN_COMADJ_NUMERO
 (P_SEGORG_ID IN NUMBER
 ,P_EJERCICIO IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el numero de Proceso de su numerador */
FUNCTION OBTN_COMCON_NUMERO
 (P_SEGORG_ID IN NUMBER
 ,P_EJERCICIO IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el numero de Cotización de su numerador */
FUNCTION OBTN_COMCTZ_NUMERO
 (P_SEGORG_ID IN NUMBER
 ,P_EJERCICIO IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el numero de Ordenes de Compra de su numerador */
FUNCTION OBTN_COMOCM_NUMERO
 (P_SEGORG_ID IN NUMBER
 ,P_EJERCICIO IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el numero de Pedido de su numerador */
FUNCTION OBTN_COMPED_NUMERO
 (P_SEGORG_ID IN NUMBER
 ,P_EJERCICIO IN NUMBER
 )
 RETURN NUMBER;
/* Obtener el Id del estado anterior al actual de la contratación */
FUNCTION OBTN_COMCOE_ANT_ID
 (P_COMCON_ID IN NUMBER
 )
 RETURN NUMBER;
/* Obtener si un  Pedido contiene todos los Items con Precio Testigo */
FUNCTION OBTN_COMPED_CTP_SN
 (P_COMCON_ID IN COM_CONTRATACIONES.ID%TYPE
 )
 RETURN VARCHAR2;
FUNCTION OBTN_COMPARATIVA_CTP
 (P_PRECIO_COTIZADO IN NUMBER
 ,P_PRECIO_TESTIGO IN NUMBER
 )
 RETURN INTEGER;
/* Obtener Diferencias de Precios Testigos Vigentes en Pedidos */
FUNCTION OBTN_COMPED_DIF_CTP
 (P_COMCON_ID IN COM_CONTRATACIONES.ID%TYPE
 )
 RETURN VARCHAR2;
/* Obtener valor Cantidad Operaciones Adjudicadas */
FUNCTION OBTN_VALOR_COP
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 )
 RETURN NUMBER;
/* Obtener valor Cantidad Operaciones Adjudicadas */
FUNCTION OBTN_VALOR_COP_MONTO
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_MONTO_COP OUT NUMBER
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 )
 RETURN NUMBER;
/* Obtener valor Porcentaje del Importe Concretado Positivo */
FUNCTION OBTN_VALOR_PIM
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 )
 RETURN NUMBER;
/* Obtener Cantidad de  Operaciones Concretadas */
FUNCTION OBTN_VALOR_COC
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 )
 RETURN NUMBER;
/* Obtener Cantidad de Operaciones Calificadas Negativas */
FUNCTION OBTN_VALOR_COC_NEG
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 )
 RETURN NUMBER;
/* Obtener Cantidad de Operaciones Calificadas Neutras */
FUNCTION OBTN_VALOR_COC_NEU
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 )
 RETURN NUMBER;
/* Obtener Cantidad de Operaciones Calificadas Positivas */
FUNCTION OBTN_VALOR_COC_POS
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 )
 RETURN NUMBER;
/* Obtener valor Porcentaje de  Operaciones Concretadas */
FUNCTION OBTN_VALOR_POC
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 )
 RETURN NUMBER;
/* Obtener valor Porcentaje de  Operaciones Concretadas Actualizada */
FUNCTION OBTN_VALOR_POCACT
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_FECHA IN DATE
 )
 RETURN NUMBER;
/* Obtener Cantidad de  Operaciones Concretadas Actualmente */
FUNCTION OBTN_VALOR_COCACT
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_FECHA IN DATE := sysdate
 )
 RETURN NUMBER;
/* Obtener valor Porcentaje de Operaciones Positivas */
FUNCTION OBTN_VALOR_POP
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_FECHA_MOV_DESDE IN DATE
 ,P_FECHA_MOV_HASTA IN DATE
 )
 RETURN NUMBER;
/* Obtener el menor valor de la Reputación del proveedor */
FUNCTION OBTN_COMRRP_VAL
 (P_COMRUB_ID IN COM_REPUTACION_RUBPRV.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_REPUTACION_RUBPRV.COMPRV_ID%TYPE
 ,P_FECHA_VIGENCIA IN DATE
 ,P_TIPO_PRV OUT VARCHAR2
 )
 RETURN NUMBER;
/* Obtener la Reputación del proveedor con su grafica */
FUNCTION OBTN_REPUTACION_URL
 (P_COMRUB_ID IN COM_REPUTACION_RUB.COMRUB_ID%TYPE
 ,P_COMPRV_ID IN COM_PROVEEDORES.ID%TYPE
 ,P_FECHA_VIGENCIA IN DATE
 ,P_COLOR_FONDO IN VARCHAR2
 )
 RETURN VARCHAR2;
/* Obtener la proximidad del Proveedor al Domicilio del Pedido */
FUNCTION OBTN_CATEG_DOM_URL
 (P_COMPRV_ID IN COM_PROVEEDORES.ID%TYPE
 ,P_COMPED_ID IN COM_PEDIDOS.ID%TYPE
 ,P_COLOR_FONDO IN VARCHAR2
 )
 RETURN VARCHAR2;
/* Obtiene la Contraseña por defecto para el Usuario */
FUNCTION OBTN_CONTRASENIA
 (P_NOMBRE IN VARCHAR2
 ,P_NUMERO_DOCUMENTO IN VARCHAR2
 )
 RETURN VARCHAR2;
/* Obtenner si se muestra mensaje al proveedor */
FUNCTION OBTN_MUESTRO_MSJ_SN
 (P_COMCON_ID IN COM_CONTRATACIONES.ID%TYPE
 ,P_COMPRV_ID IN COM_PROVEEDORES.ID%TYPE
 )
 RETURN VARCHAR2;
/* Obtiene la Cantidad a Adjudicar de un Item */
FUNCTION OBTN_COMADD_CANT_ADJ
 (P_COMPET_ID IN COM_PEDIDOS_DETALLES.ID%TYPE
 )
 RETURN NUMBER;
/* Obtiene el Saldo del Item de Pedido */
FUNCTION OBTN_COMPET_SALDO
 (P_COMPET_ID IN COM_PEDIDOS_DETALLES.ID%TYPE
 )
 RETURN NUMBER;
/* Obtiene la Cantidad Adjudicada de un Item */
FUNCTION OBTN_COMOCD_CANT_ADJ
 (P_COMPET_ID IN COM_PEDIDOS_DETALLES.ID%TYPE
 )
 RETURN NUMBER;
/* Obtener el Id del Estado vigente de una Orden de Compra */
FUNCTION OBTN_COMOCE_ID
 (P_COMOCM_ID IN NUMBER
 ,P_FECHA IN DATE := SYSDATE
 )
 RETURN NUMBER;
/* Obtener el Estado interpretado de una Orden de Compra */
FUNCTION OBTN_COMOCE_ESTADO
 (P_COMOCM_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Obtiene la interpretación del Estado del proceso */
FUNCTION OBTN_COMCON_ESTADO
 (P_COMCON_ID IN COM_CONTRATACIONES.ID%TYPE
 ,P_COMPRV_ID IN COM_PROVEEDORES.ID%TYPE
 )
 RETURN VARCHAR2;
/* Obtener el numero de un numerador configurado */
FUNCTION OBTN_COMNUM_NUMERO
 (P_CODIGO IN VARCHAR2
 ,P_SEGORG_ID IN NUMBER
 ,P_EJERCICIO IN NUMBER := to_number(to_char(sysdate,'YYYY'))
 )
 RETURN NUMBER;
/* Obtiene si aun se puede Cotizar una Contratacion */
FUNCTION OBTN_COMCON_COTIZAR
 (P_COMCON_ID IN COM_CONTRATACIONES.ID%TYPE
 )
 RETURN VARCHAR2;
/* Obtener el Nombre del Contratante. */
FUNCTION OBTN_COMECO_NOMBRE
 (P_COMECO_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Obtengo el Codigo del Contratante. */
FUNCTION OBTN_COMECO_CODIGO
 (P_COMECO_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Obtiene el Estado del Proveedor a la fecha dada */
FUNCTION OBTN_COMPRE_ID
 (P_COMPRV_ID IN NUMBER
 ,P_FECHA IN DATE := SYSDATE
 )
 RETURN NUMBER;
/* Obtener el Id del Estado del Pedido */
FUNCTION OBTN_COMPEE_ID
 (P_COMPED_ID IN NUMBER
 ,P_FECHA IN DATE := sysdate
 )
 RETURN NUMBER;
/* Obtiene el Estado del Contratante la fecha dada */
FUNCTION OBTN_COMECE_ID
 (P_COMECO_ID IN NUMBER
 ,P_FECHA IN DATE := SYSDATE
 )
 RETURN NUMBER;
/* Obtener el Id del estado de la contratación */
FUNCTION OBTN_COMCOE_ID
 (P_COMCON_ID IN NUMBER
 ,P_FECHA IN DATE := SYSDATE
 )
 RETURN NUMBER;
/* Obtener la descripción de un item */
FUNCTION OBTN_COMCIT_DESC
 (P_COMCIT_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Obtiene el valor de una columna de una linea con separador. */
FUNCTION OBTN_VALOR_COL
 (P_LINEA IN VARCHAR2
 ,P_COLUMNA IN NUMBER
 ,P_SEPARADOR IN VARCHAR2
 )
 RETURN VARCHAR2;
/* Obtiene el Total de una Orden de Compra */
FUNCTION OBTN_COMOCM_TOTAL
 (P_COMOCM_ID IN COM_ORDENES_COMPRAS_DET.COMOCM_ID%TYPE
 )
 RETURN NUMBER;
/* Obtener el Id del Precio Actual para un Item */
FUNCTION OBTN_COMCTP_ID
 (P_COMCIT_ID IN NUMBER
 ,P_FECHA IN DATE := sysdate
 )
 RETURN NUMBER;
/* Obtener el estado de la Contratación */
FUNCTION OBTN_COMCOE_ID_EST
 (P_COMCON_ID IN NUMBER
 ,P_ESTADO IN VARCHAR2
 )
 RETURN NUMBER;
FUNCTION OBTN_COMCLF_CLFMOT
 (P_COMOCM_ID IN NUMBER
 )
 RETURN VARCHAR2;
FUNCTION OBTN_PERFILES_USUAR
 (P_SEGUSU_ID IN NUMBER
 )
 RETURN VARCHAR2;
/* Verifica si existe una Seguencia, sino la crea */
PROCEDURE VERIFICO_SQ
 (P_SECUENCIA_NUMERADOR IN VARCHAR2
 );
/* Validar Entidad Contratante segun Usuario */
FUNCTION VLDR_SEGUSU_ECO
 (P_USUARIO IN VARCHAR2
 )
 RETURN BOOLEAN;
/* Validar la planilla para Importar precios testigos al catalogo. */
PROCEDURE VLDR_COMDOC_CTP
 (P_ID IN COM_DOCUMENTOS.ID%TYPE
 ,P_SEPARADOR IN VARCHAR2 := ';'
 ,P_MENSAJE OUT VARCHAR2
 ,P_VALIDO OUT VARCHAR2
 );
END COM_PKG;
